@model ShipmentViewModel
@{
    ViewData["Title"] = "Shipment";
}

<div class="container col-md-7">
    <h4>待出貨清單</h4>
    <div class="form-container row d-flex justify-content-center align-items-center">
        <div class="shipment-list row p-0 mt-3">
            @if (Model.Orders == null || !Model.Orders.Any())
            {
                <div class="row non-product-show">
                    <div class="d-flex align-items-center justify-content-center message-container">
                        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-exclamation-circle" viewBox="0 0 16 16" style="color: #818181;">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                            <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z" />
                        </svg>
                        <span class="mt-3" style="color: #818181;">目前尚無產品，請先新增</span>
                    </div>
                </div>
            }
            else
            {
                @foreach (var item in Model.Orders)
                {
                    <div class="mb-4 d-flex justify-content-center align-items-center p-0">
                        <div class="form-check col-md-1 d-flex justify-content-center align-items-center p-0">
                            <input class="form-check-input order-checkbox" type="checkbox" value="" id="flexCheckDefault" data-id="@item.Id" data-product-name="@item.ProductName">
                            <label class="form-check-label" for="flexCheckDefault"></label>
                        </div>
                        <div class="row shipment-item col-md-11 d-flex align-items-center" data-product-name="@item.ProductName" data-category="@item.Category">
                            @foreach (var img in Model.Imgsrc[item.ProductId])
                            {
                                <img class="col-md-3" src="@img" />
                            }
                            <div class="col-md-5 title-name p-0 ms-2">
                                <div class="category-item d-inline" data-category="@item.Category">
                                    @item.Category
                                </div>
                                <div class="mt-2 product-name" data-product-name="@item.ProductName">
                                    @item.ProductName
                                </div>
                            </div>
                            <div class="col-md-3 quantity-control p-0">
                                <input type='button' value='-' class='qtyminus qty-btn d-flex justify-content-center align-items-center' field='quantity' />
                                <input type='text' value='@item.Amount' class='qty text-center' name='quantity' data-amount="@item.Amount" data-id="@item.Id" readonly />
                                <input type='button' value='+' class='qtyplus qty-btn d-flex justify-content-center align-items-center' field='quantity' />
                            </div>
                            <div class="col-md-1 form-group ms-5 d-flex justify-content-right">
                                <input type="submit" value="刪除" class="delete-btn btn-danger btn" data-id="@item.Id" style="padding: 3px 25px; font-size: 15px;" />
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <div>
            <input type="submit" value="出貨" class="submit-btn btn" />
        </div>
    </div>
</div>

@section Scripts {
<script>
    const saveArray = [];
    var currentVal;
    var orderList = @Html.Raw(Json.Serialize(Model.Orders));
    
    $(function () {
        $('.qtyplus, .qtyminus').click(function (e) {
            e.preventDefault();
            var $this = $(this);
            var fieldName = $this.attr('field');
            var $input = $this.siblings('input[name=' + fieldName + ']');
            var id = $this.siblings('input.qty').data('id');
            var product = orderList.find(x => x.Id = id);
            currentVal = parseInt($input.val());
            console.log(product)
            if ($this.hasClass('qtyplus')) {
                $input.val(!isNaN(currentVal) ? currentVal + 1 : 0);
            } else if ($this.hasClass('qtyminus')) {
                $input.val(!isNaN(currentVal) && currentVal > 0 ? currentVal - 1 : 0);
            }

            const productDiv = this.closest('.shipment-item');
            const productName = productDiv.getAttribute('data-product-name');
            const productCategory = productDiv.getAttribute('data-category');

            const amount = parseInt($this.siblings('input[name=' + fieldName + ']').val());
            AmountSave(product.productId, productName, productCategory, amount)
        });

    });

    function AmountSave(productId, productName, productCategory, amount) {

        fetch('/Shipment/SaveOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({"ProductId": productId, "ProductName": productName, "Amount": amount, "Category": productCategory })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('成功', data)

                    var checkbox = document.getElementById('flexCheckDefault');
                    var id = checkbox.getAttribute('data-id');
                    var order = orderList.find(order => order.id == id);
                    order.amount = amount
                } else {
                    swal.fire({
                        title: '已超出庫存書量',
                        text: '點選數量已超出庫存書量，請先確認庫存',
                        icon: 'warning',
                        confirmButtonText: '確定',
                        closeModal: false,
                        allowOutsideClick: false,
                        closeOnConfirm: false,
                        closeOnCancel: false,
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload();
                        }
                    });
                }
            })
            .catch(error => console.error('Error:', error));
    }

    $('.delete-btn').on('click', function (e) {
        e.preventDefault();

        const id = $(this).attr('data-id');

        swal.fire({
            title: '您的產品即將被刪除',
            text: '產品刪除後將無法復原，請問您是否要刪除產品?',
            icon: 'warning',
            confirmButtonText: '確定',
            cancelButtonText: '取消',
            showCancelButton: true,
            closeModal: false,
            allowOutsideClick: false,
            closeOnConfirm: false,
            closeOnCancel: false,
        }).then((result) => {
            if (result.isConfirmed) {
                deleteData(id);
            } else {
                swal.fire({ title: "產品已被取消刪除" });
            }
        });

        
    })

    function deleteData(id) {

        fetch(`/Shipment/Delete?id=${id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    swal.fire({
                        title: "您的產品已被刪除",
                        icon: "success",
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    swal.fire({
                        title: "Error occurred while deleting your product.",
                        icon: "error",
                    });
                }
            })
            .catch(error => {
                console.error('錯誤:', error);
            });
    }

    $('.order-checkbox').on('click', function () {
        const id = $(this).attr('data-id');
        var order = orderList.find(order => order.id == id);

        saveArray.push({ "ProductName": order.productName, "Amount": order.amount })

    })

    $('.submit-btn').on('click', async function () {
        console.log(saveArray)
        if (saveArray.length === 0) {
            swal.fire({
                title: "請先選擇出貨產品",
                icon: "error"
            })
        } else {
            try{
                const response = await fetch('/Shipment/Order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(saveArray)
                })
                const data = await response.json();
                if (data.success) {
                    swal.fire({
                        icon: 'success',
                        title: '訂單成功',
                        text: '您的訂單已經成功處理',
                        confirmButtonText: '確定'
                    }).then(() => {
                        location.reload();
                        saveArray = [];
                    })
                } else {
                    swal.fire({
                        title: "Error occurred: 產品出貨發生錯誤",
                        icon: "error",
                        confirmButtonText: '確定'
                    });
                }
            }
                catch(error) {
                    console.error('錯誤:', error);
                }
        }
    })

</script>
}